{
	"name": "01_taxi_eda",
	"properties": {
		"folder": {
			"name": "taxi_spk_pool"
		},
		"nbformat": 4,
		"nbformat_minor": 2,
		"bigDataPool": {
			"referenceName": "synspdev00006",
			"type": "BigDataPoolReference"
		},
		"sessionProperties": {
			"driverMemory": "28g",
			"driverCores": 4,
			"executorMemory": "28g",
			"executorCores": 4,
			"numExecutors": 2,
			"conf": {
				"spark.dynamicAllocation.enabled": "false",
				"spark.dynamicAllocation.minExecutors": "2",
				"spark.dynamicAllocation.maxExecutors": "2",
				"spark.autotune.trackingId": "b99e282a-cc07-44e7-8df7-485134dadce2"
			}
		},
		"metadata": {
			"saveOutput": true,
			"enableDebugMode": false,
			"kernelspec": {
				"name": "synapse_pyspark",
				"display_name": "Synapse PySpark"
			},
			"language_info": {
				"name": "python"
			},
			"a365ComputeOptions": {
				"id": "/subscriptions/272f5f06-6693-48ae-975b-b5c7553539c2/resourceGroups/ag83-00006-dev-rg/providers/Microsoft.Synapse/workspaces/ag83-syws-dev-00006/bigDataPools/synspdev00006",
				"name": "synspdev00006",
				"type": "Spark",
				"endpoint": "https://ag83-syws-dev-00006.dev.azuresynapse.net/livyApi/versions/2019-11-01-preview/sparkPools/synspdev00006",
				"auth": {
					"type": "AAD",
					"authResource": "https://dev.azuresynapse.net"
				},
				"sparkVersion": "2.4",
				"nodeCount": 3,
				"cores": 4,
				"memory": 28,
				"automaticScaleJobs": false
			},
			"sessionKeepAliveTimeout": 30
		},
		"cells": [
			{
				"cell_type": "code",
				"source": [
					"import matplotlib.pyplot as plt\r\n",
					"import seaborn as sns\r\n",
					"import pandas as pd"
				],
				"execution_count": 1
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"from azureml.opendatasets import NycTlcYellow\r\n",
					"from datetime import datetime\r\n",
					"from dateutil import parser\r\n",
					"\r\n",
					"end_date = parser.parse('2018-06-06')\r\n",
					"start_date = parser.parse('2018-05-01')\r\n",
					"nyc_tlc = NycTlcYellow(start_date=start_date, end_date=end_date)\r\n",
					"df = nyc_tlc.to_spark_dataframe()"
				],
				"execution_count": 2
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"# Filter the dataset \r\n",
					"from pyspark.sql.functions import *\r\n",
					"\r\n",
					"filtered_df = df.select('vendorID', 'passengerCount', 'tripDistance','paymentType', 'fareAmount', 'tipAmount'\\\r\n",
					"                                , date_format('tpepPickupDateTime', 'hh').alias('hour_of_day')\\\r\n",
					"                                , dayofweek('tpepPickupDateTime').alias('day_of_week')\\\r\n",
					"                                , dayofmonth(col('tpepPickupDateTime')).alias('day_of_month'))\\\r\n",
					"                            .filter((df.passengerCount > 0)\\\r\n",
					"                                & (df.tipAmount >= 0)\\\r\n",
					"                                & (df.fareAmount >= 1) & (df.fareAmount <= 250)\\\r\n",
					"                                & (df.tripDistance > 0) & (df.tripDistance <= 200))\r\n",
					"\r\n",
					"filtered_df.createOrReplaceTempView(\"taxi_dataset\")"
				],
				"execution_count": 3
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"microsoft": {
						"language": "sparksql"
					}
				},
				"source": [
					"%%sql\r\n",
					"SELECT \r\n",
					"    day_of_month\r\n",
					"    , MIN(tipAmount) AS minTipAmount\r\n",
					"    , MAX(tipAmount) AS maxTipAmount\r\n",
					"    , AVG(tipAmount) AS avgTipAmount\r\n",
					"    , AVG(fareAmount) as fareAmount\r\n",
					"FROM taxi_dataset \r\n",
					"GROUP BY day_of_month\r\n",
					"ORDER BY day_of_month ASC"
				],
				"execution_count": 6
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"# To make development easier, faster, and less expensive, downsample for now\r\n",
					"sampled_taxi_df = filtered_df.sample(True, 0.001, seed=1234)\r\n",
					"\r\n",
					"# The charting package needs a Pandas DataFrame or NumPy array to do the conversion\r\n",
					"sampled_taxi_pd_df = sampled_taxi_df.toPandas()"
				],
				"execution_count": 5
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"# Look at a histogram of tips by count by using Matplotlib\r\n",
					"\r\n",
					"ax1 = sampled_taxi_pd_df['tipAmount'].plot(kind='hist', bins=25, facecolor='lightblue')\r\n",
					"ax1.set_title('Tip amount distribution')\r\n",
					"ax1.set_xlabel('Tip Amount ($)')\r\n",
					"ax1.set_ylabel('Counts')\r\n",
					"plt.suptitle('')\r\n",
					"plt.show()"
				],
				"execution_count": 7
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"# View the distribution of tips by day of week using Seaborn\r\n",
					"ax = sns.boxplot(x=\"day_of_week\", y=\"tipAmount\",data=sampled_taxi_pd_df, showfliers = False)\r\n",
					"ax.set_title('Tip amount distribution per day')\r\n",
					"ax.set_xlabel('Day of Week')\r\n",
					"ax.set_ylabel('Tip Amount ($)')\r\n",
					"plt.show()"
				],
				"execution_count": 8
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"# How many passengers tipped by various amounts \r\n",
					"ax2 = sampled_taxi_pd_df.boxplot(column=['tipAmount'], by=['passengerCount'])\r\n",
					"ax2.set_title('Tip amount by Passenger count')\r\n",
					"ax2.set_xlabel('Passenger count')\r\n",
					"ax2.set_ylabel('Tip Amount ($)')\r\n",
					"ax2.set_ylim(0,30)\r\n",
					"plt.suptitle('')\r\n",
					"plt.show()"
				],
				"execution_count": 9
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"# Look at the relationship between fare and tip amounts\r\n",
					"\r\n",
					"ax = sampled_taxi_pd_df.plot(kind='scatter', x= 'fareAmount', y = 'tipAmount', c='blue', alpha = 0.10, s=2.5*(sampled_taxi_pd_df['passengerCount']))\r\n",
					"ax.set_title('Tip amount by Fare amount')\r\n",
					"ax.set_xlabel('Fare Amount ($)')\r\n",
					"ax.set_ylabel('Tip Amount ($)')\r\n",
					"plt.axis([-2, 80, -2, 20])\r\n",
					"plt.suptitle('')\r\n",
					"plt.show()"
				],
				"execution_count": 10
			}
		]
	}
}