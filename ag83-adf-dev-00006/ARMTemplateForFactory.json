{
	"$schema": "http://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
	"contentVersion": "1.0.0.0",
	"parameters": {
		"factoryName": {
			"type": "string",
			"metadata": "Data Factory name",
			"defaultValue": "ag83-adf-dev-00006"
		},
		"Ls_AzureSQLDW_01_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'Ls_AzureSQLDW_01'"
		},
		"Ls_Onprem_SQLServer_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'Ls_Onprem_SQLServer'"
		},
		"Ls_AdlsGen2_01_properties_typeProperties_url": {
			"type": "string",
			"defaultValue": "https://ag83stdev00006.dfs.core.windows.net"
		},
		"Ls_KeyVault_01_properties_typeProperties_baseUrl": {
			"type": "string",
			"defaultValue": "https://ag83-kv-dev-00006.vault.azure.net/"
		},
		"Ls_SqlDb_01_properties_typeProperties_connectionString_secretName": {
			"type": "string",
			"defaultValue": "sqlConnectionString"
		},
		"Lsshir01_properties_typeProperties_linkedInfo_resourceId": {
			"type": "string",
			"defaultValue": "/subscriptions/272f5f06-6693-48ae-975b-b5c7553539c2/resourcegroups/rg-ag83data-dev-001/providers/Microsoft.DataFactory/factories/adf-ag83data-dev/integrationruntimes/ag83-integrationRuntime1"
		}
	},
	"variables": {
		"factoryId": "[concat('Microsoft.DataFactory/factories/', parameters('factoryName'))]"
	},
	"resources": [
		{
			"name": "[concat(parameters('factoryName'), '/BulkCopyfrom_AzureDLStorage_to_SynapseDedicatedPool')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Get Container Folders",
						"type": "GetMetadata",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataset": {
								"referenceName": "AzureDLStorage_GetMetadataDataset",
								"type": "DatasetReference",
								"parameters": {
									"SourceContainer": {
										"value": "@pipeline().parameters.SourceContainer",
										"type": "Expression"
									}
								}
							},
							"fieldList": [
								"childItems"
							],
							"storeSettings": {
								"type": "AzureBlobFSReadSettings",
								"recursive": true
							},
							"formatSettings": {
								"type": "DelimitedTextReadSettings"
							}
						}
					},
					{
						"name": "ForEachFolder",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "Get Container Folders",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('Get Container Folders').output.childItems",
								"type": "Expression"
							},
							"activities": [
								{
									"name": "CopyFiles",
									"type": "Copy",
									"dependsOn": [],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "DelimitedTextSource",
											"storeSettings": {
												"type": "AzureBlobFSReadSettings",
												"recursive": true,
												"wildcardFolderPath": {
													"value": "@item().name",
													"type": "Expression"
												},
												"wildcardFileName": "*"
											},
											"formatSettings": {
												"type": "DelimitedTextReadSettings"
											}
										},
										"sink": {
											"type": "SqlDWSink",
											"allowPolyBase": true,
											"polyBaseSettings": {
												"rejectValue": 0,
												"rejectType": "value",
												"useTypeDefault": true
											},
											"tableOption": "autoCreate",
											"disableMetricsCollection": false
										},
										"enableStaging": true,
										"stagingSettings": {
											"linkedServiceName": {
												"referenceName": "Ls_AdlsGen2_01",
												"type": "LinkedServiceReference"
											},
											"path": "adfsolutiontemplate/BulkCopyfromFilestoDB"
										}
									},
									"inputs": [
										{
											"referenceName": "AzureDLStorage_input_csv",
											"type": "DatasetReference",
											"parameters": {
												"SourceContainer": {
													"value": "@pipeline().parameters.SourceContainer",
													"type": "Expression"
												}
											}
										}
									],
									"outputs": [
										{
											"referenceName": "AzureSynapseAnalyticsTable",
											"type": "DatasetReference",
											"parameters": {
												"sinkTableName": {
													"value": "@item().name",
													"type": "Expression"
												},
												"sinkTableSchema": {
													"value": "@pipeline().parameters.SourceContainer",
													"type": "Expression"
												}
											}
										}
									]
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"parameters": {
					"SourceContainer": {
						"type": "string"
					}
				},
				"folder": {
					"name": "BulkCopies"
				},
				"annotations": [],
				"lastPublishTime": "2021-12-12T15:00:26Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/AzureDLStorage_GetMetadataDataset')]",
				"[concat(variables('factoryId'), '/datasets/AzureDLStorage_input_csv')]",
				"[concat(variables('factoryId'), '/datasets/AzureSynapseAnalyticsTable')]",
				"[concat(variables('factoryId'), '/linkedServices/Ls_AdlsGen2_01')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/BulkCopyfrom_AzureDLStorage_to_SynapseDedicatedPool_parquet')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Get Container Folders",
						"type": "GetMetadata",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataset": {
								"referenceName": "AzureDLStorage_GetMetadataDataset",
								"type": "DatasetReference",
								"parameters": {
									"SourceContainer": {
										"value": "@pipeline().parameters.SourceContainer",
										"type": "Expression"
									}
								}
							},
							"fieldList": [
								"childItems"
							],
							"storeSettings": {
								"type": "AzureBlobFSReadSettings",
								"recursive": true
							},
							"formatSettings": {
								"type": "DelimitedTextReadSettings"
							}
						}
					},
					{
						"name": "ForEachFolder",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "Get Container Folders",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('Get Container Folders').output.childItems",
								"type": "Expression"
							},
							"activities": [
								{
									"name": "CopyFiles",
									"type": "Copy",
									"dependsOn": [],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "ParquetSource",
											"storeSettings": {
												"type": "AzureBlobFSReadSettings",
												"recursive": true,
												"wildcardFolderPath": {
													"value": "@item().name",
													"type": "Expression"
												},
												"wildcardFileName": "*.parquet",
												"enablePartitionDiscovery": false
											}
										},
										"sink": {
											"type": "SqlDWSink",
											"allowPolyBase": true,
											"polyBaseSettings": {
												"rejectValue": 0,
												"rejectType": "value",
												"useTypeDefault": true
											},
											"tableOption": "autoCreate",
											"disableMetricsCollection": false
										},
										"enableStaging": true,
										"stagingSettings": {
											"linkedServiceName": {
												"referenceName": "Ls_AdlsGen2_01",
												"type": "LinkedServiceReference"
											},
											"path": "adfsolutiontemplate/BulkCopyfromFilestoDB"
										}
									},
									"inputs": [
										{
											"referenceName": "AzureDLStorage_input_parquet",
											"type": "DatasetReference",
											"parameters": {
												"SourceContainer": {
													"value": "@pipeline().parameters.SourceContainer",
													"type": "Expression"
												}
											}
										}
									],
									"outputs": [
										{
											"referenceName": "AzureSynapseAnalyticsTable",
											"type": "DatasetReference",
											"parameters": {
												"sinkTableName": {
													"value": "@item().name",
													"type": "Expression"
												},
												"sinkTableSchema": {
													"value": "@pipeline().parameters.SourceContainer",
													"type": "Expression"
												}
											}
										}
									]
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"parameters": {
					"SourceContainer": {
						"type": "string"
					}
				},
				"folder": {
					"name": "BulkCopies"
				},
				"annotations": [],
				"lastPublishTime": "2021-12-12T22:06:22Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/AzureDLStorage_GetMetadataDataset')]",
				"[concat(variables('factoryId'), '/datasets/AzureDLStorage_input_parquet')]",
				"[concat(variables('factoryId'), '/datasets/AzureSynapseAnalyticsTable')]",
				"[concat(variables('factoryId'), '/linkedServices/Ls_AdlsGen2_01')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/BulkCopyfrom_AzureSQLdb_to_AzureDLStorage')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "Copy huge amount of data in bulk from database using external control table to store source table list with partitions for each table.\n\nWhen you want to migrate data from your Azure Synapse Analytics like Oracle server, Netezza server, Teradata server or SQL Server to Azure, you have to load huge amount of data from multiple tables in data sources. In most cases, data has to be further partitioned in each table so that you can load rows with multiple threads in parallel from single table.",
				"activities": [
					{
						"name": "GetPartitionList",
						"description": "Lookup activity to retrieve the list of partitions stored in the external control table.",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "SqlSource",
								"sqlReaderQuery": {
									"value": "select @{pipeline().parameters.Control_Table_Schema_PartitionID} as PartitionID, \n@{pipeline().parameters.Control_Table_Schema_SourceTableSchema} as SourceTableSchema, \n@{pipeline().parameters.Control_Table_Schema_SourceTableName} as SourceTableName, @{pipeline().parameters.Control_Table_Schema_FilterQuery} as FilterQuery from @{pipeline().parameters.Control_Table_Name}\n\n",
									"type": "Expression"
								},
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "AzureSqlDatabaseExternal_ControlTable",
								"type": "DatasetReference",
								"parameters": {
									"TableName": {
										"value": "@pipeline().parameters.Control_Table_Name",
										"type": "Expression"
									}
								}
							},
							"firstRowOnly": false
						}
					},
					{
						"name": "ForEachPartition",
						"description": "ForEach activity to get the partition list from Lookup activity and then iterate each of them to Copy activity. ",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "GetPartitionList",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('GetPartitionList').output.value",
								"type": "Expression"
							},
							"batchCount": 5,
							"activities": [
								{
									"name": "CopyOnePartition_to_ADLS",
									"description": "Copy activity to copy each partition from source database store to destination store.",
									"type": "Copy",
									"dependsOn": [],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "SqlSource",
											"partitionOption": "None"
										},
										"sink": {
											"type": "DelimitedTextSink",
											"storeSettings": {
												"type": "AzureBlobFSWriteSettings"
											},
											"formatSettings": {
												"type": "DelimitedTextWriteSettings",
												"quoteAllText": true,
												"fileExtension": ".txt"
											}
										},
										"enableStaging": false,
										"dataIntegrationUnits": 0
									},
									"inputs": [
										{
											"referenceName": "AzureSqlDatabaseTable",
											"type": "DatasetReference",
											"parameters": {
												"sourceTableName": {
													"value": "@item().SourceTableName",
													"type": "Expression"
												},
												"sourceTableSchema": {
													"value": "@item().SourceTableSchema",
													"type": "Expression"
												}
											}
										}
									],
									"outputs": [
										{
											"referenceName": "AzureDLStorage",
											"type": "DatasetReference",
											"parameters": {
												"Data_Destination_Container": {
													"value": "@item().SourceTableSchema",
													"type": "Expression"
												},
												"Data_Destination_Directory": {
													"value": "@item().SourceTableName",
													"type": "Expression"
												}
											}
										}
									]
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"parameters": {
					"Control_Table_Name": {
						"type": "String",
						"defaultValue": "dbo.ControlTableForTemplate"
					},
					"Control_Table_Schema_PartitionID": {
						"type": "String",
						"defaultValue": "PartitionID"
					},
					"Control_Table_Schema_SourceTableName": {
						"type": "String",
						"defaultValue": "SourceTableName"
					},
					"Control_Table_Schema_FilterQuery": {
						"type": "String",
						"defaultValue": "FilterQuery"
					},
					"Data_Destination_Container": {
						"type": "String",
						"defaultValue": "prova"
					},
					"Data_Destination_Directory": {
						"type": "String",
						"defaultValue": "radice"
					},
					"Control_Table_Schema_SourceTableSchema": {
						"type": "string",
						"defaultValue": "SourceTableSchema"
					}
				},
				"folder": {
					"name": "BulkCopies"
				},
				"annotations": [],
				"lastPublishTime": "2021-12-11T13:35:18Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/AzureSqlDatabaseExternal_ControlTable')]",
				"[concat(variables('factoryId'), '/datasets/AzureSqlDatabaseTable')]",
				"[concat(variables('factoryId'), '/datasets/AzureDLStorage')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/BulkCopyfrom_AzureSQLdb_to_SQLServer')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "Copy huge amount of data in bulk from database using external control table to store source table list with partitions for each table.\n\nWhen you want to migrate data from your Azure Synapse Analytics like Oracle server, Netezza server, Teradata server or SQL Server to Azure, you have to load huge amount of data from multiple tables in data sources. In most cases, data has to be further partitioned in each table so that you can load rows with multiple threads in parallel from single table.",
				"activities": [
					{
						"name": "GetPartitionList",
						"description": "Lookup activity to retrieve the list of partitions stored in the external control table.",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "SqlSource",
								"sqlReaderQuery": {
									"value": "select @{pipeline().parameters.Control_Table_Schema_PartitionID} as PartitionID, \n@{pipeline().parameters.Control_Table_Schema_SourceTableSchema} as SourceTableSchema,\n@{pipeline().parameters.Control_Table_Schema_SourceTableName} as SourceTableName, @{pipeline().parameters.Control_Table_Schema_FilterQuery} as FilterQuery from @{pipeline().parameters.Control_Table_Name}",
									"type": "Expression"
								},
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "AzureSqlDatabaseExternal_ControlTable",
								"type": "DatasetReference",
								"parameters": {
									"TableName": {
										"value": "@pipeline().parameters.Control_Table_Name",
										"type": "Expression"
									}
								}
							},
							"firstRowOnly": false
						}
					},
					{
						"name": "ForEachPartition",
						"description": "ForEach activity to get the partition list from Lookup activity and then iterate each of them to Copy activity. ",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "GetPartitionList",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('GetPartitionList').output.value",
								"type": "Expression"
							},
							"batchCount": 5,
							"activities": [
								{
									"name": "CopyTable_to_Sqlserver",
									"description": "Copy activity to copy each partition from source database store to destination store.",
									"type": "Copy",
									"dependsOn": [],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "AzureSqlSource",
											"queryTimeout": "02:00:00",
											"partitionOption": "None"
										},
										"sink": {
											"type": "SqlServerSink",
											"preCopyScript": {
												"value": "TRUNCATE TABLE @{item().SourceTableSchema}.@{item().SourceTableName}",
												"type": "Expression"
											},
											"tableOption": "autoCreate"
										},
										"enableStaging": false,
										"dataIntegrationUnits": 0
									},
									"inputs": [
										{
											"referenceName": "AzureSqlDatabaseTable",
											"type": "DatasetReference",
											"parameters": {
												"sourceTableName": {
													"value": "@item().SourceTableName",
													"type": "Expression"
												},
												"sourceTableSchema": {
													"value": "@item().SourceTableSchema",
													"type": "Expression"
												}
											}
										}
									],
									"outputs": [
										{
											"referenceName": "SqlServer_onPremise",
											"type": "DatasetReference",
											"parameters": {
												"sinkTableName": {
													"value": "@item().SourceTableName",
													"type": "Expression"
												},
												"sinkTableSchema": {
													"value": "@item().SourceTableSchema",
													"type": "Expression"
												}
											}
										}
									]
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"parameters": {
					"Control_Table_Name": {
						"type": "String",
						"defaultValue": "dbo.ControlTableForTemplate"
					},
					"Control_Table_Schema_PartitionID": {
						"type": "String",
						"defaultValue": "PartitionID"
					},
					"Control_Table_Schema_SourceTableName": {
						"type": "String",
						"defaultValue": "SourceTableName"
					},
					"Control_Table_Schema_FilterQuery": {
						"type": "String",
						"defaultValue": "FilterQuery"
					},
					"Data_Destination_Container": {
						"type": "String",
						"defaultValue": "prova"
					},
					"Data_Destination_Directory": {
						"type": "String",
						"defaultValue": "radice"
					},
					"Control_Table_Schema_SourceTableSchema": {
						"type": "string",
						"defaultValue": "SourceTableSchema"
					}
				},
				"folder": {
					"name": "BulkCopies"
				},
				"annotations": [],
				"lastPublishTime": "2021-10-11T14:49:49Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/AzureSqlDatabaseExternal_ControlTable')]",
				"[concat(variables('factoryId'), '/datasets/AzureSqlDatabaseTable')]",
				"[concat(variables('factoryId'), '/datasets/SqlServer_onPremise')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/BulkCopyfrom_AzureSQLdb_to_SynapseDedicatedPool')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "Copy huge amount of data in bulk from database using external control table to store source table list with partitions for each table.\n\nWhen you want to migrate data from your Azure Synapse Analytics like Oracle server, Netezza server, Teradata server or SQL Server to Azure, you have to load huge amount of data from multiple tables in data sources. In most cases, data has to be further partitioned in each table so that you can load rows with multiple threads in parallel from single table.",
				"activities": [
					{
						"name": "GetPartitionList",
						"description": "Lookup activity to retrieve the list of partitions stored in the external control table.",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "SqlSource",
								"sqlReaderQuery": {
									"value": "select @{pipeline().parameters.Control_Table_Schema_PartitionID} as PartitionID, \n@{pipeline().parameters.Control_Table_Schema_SourceTableSchema} as SourceTableSchema, \n@{pipeline().parameters.Control_Table_Schema_SourceTableName} as SourceTableName, @{pipeline().parameters.Control_Table_Schema_FilterQuery} as FilterQuery from @{pipeline().parameters.Control_Table_Name}",
									"type": "Expression"
								},
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "AzureSqlDatabaseExternal_ControlTable",
								"type": "DatasetReference",
								"parameters": {
									"TableName": {
										"value": "@pipeline().parameters.Control_Table_Name",
										"type": "Expression"
									}
								}
							},
							"firstRowOnly": false
						}
					},
					{
						"name": "ForEachPartition",
						"description": "ForEach activity to get the partition list from Lookup activity and then iterate each of them to Copy activity. ",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "GetPartitionList",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('GetPartitionList').output.value",
								"type": "Expression"
							},
							"batchCount": 5,
							"activities": [
								{
									"name": "CopyOnePartition_to_SynapseDedicatedPool",
									"description": "Copy activity to copy each partition from source database store to destination store.",
									"type": "Copy",
									"dependsOn": [],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "SqlSource",
											"partitionOption": "None"
										},
										"sink": {
											"type": "SqlDWSink",
											"tableOption": "autoCreate",
											"disableMetricsCollection": false
										},
										"enableStaging": false,
										"dataIntegrationUnits": 0
									},
									"inputs": [
										{
											"referenceName": "AzureSqlDatabaseTable",
											"type": "DatasetReference",
											"parameters": {
												"sourceTableName": {
													"value": "@item().SourceTableName",
													"type": "Expression"
												},
												"sourceTableSchema": {
													"value": "@item().SourceTableSchema",
													"type": "Expression"
												}
											}
										}
									],
									"outputs": [
										{
											"referenceName": "AzureSynapseAnalyticsTable",
											"type": "DatasetReference",
											"parameters": {
												"sinkTableName": {
													"value": "@item().SourceTableName",
													"type": "Expression"
												},
												"sinkTableSchema": {
													"value": "@item().SourceTableSchema",
													"type": "Expression"
												}
											}
										}
									]
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"parameters": {
					"Control_Table_Name": {
						"type": "String",
						"defaultValue": "dbo.ControlTableForTemplate"
					},
					"Control_Table_Schema_PartitionID": {
						"type": "String",
						"defaultValue": "PartitionID"
					},
					"Control_Table_Schema_SourceTableName": {
						"type": "String",
						"defaultValue": "SourceTableName"
					},
					"Control_Table_Schema_FilterQuery": {
						"type": "String",
						"defaultValue": "FilterQuery"
					},
					"Data_Destination_Container": {
						"type": "String",
						"defaultValue": "prova"
					},
					"Data_Destination_Directory": {
						"type": "String",
						"defaultValue": "radice"
					},
					"Control_Table_Schema_SourceTableSchema": {
						"type": "string",
						"defaultValue": "SourceTableSchema"
					}
				},
				"folder": {
					"name": "BulkCopies"
				},
				"annotations": [],
				"lastPublishTime": "2021-10-03T21:23:32Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/AzureSqlDatabaseExternal_ControlTable')]",
				"[concat(variables('factoryId'), '/datasets/AzureSqlDatabaseTable')]",
				"[concat(variables('factoryId'), '/datasets/AzureSynapseAnalyticsTable')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/BulkCopyfrom_SQLServer_to_AzureDLStorage')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "Copy huge amount of data in bulk from database using external control table to store source table list with partitions for each table.\n\nWhen you want to migrate data from your Azure Synapse Analytics like Oracle server, Netezza server, Teradata server or SQL Server to Azure, you have to load huge amount of data from multiple tables in data sources. In most cases, data has to be further partitioned in each table so that you can load rows with multiple threads in parallel from single table.",
				"activities": [
					{
						"name": "GetPartitionList",
						"description": "Lookup activity to retrieve the list of partitions stored in the external control table.",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "SqlServerSource",
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "SqlServer_onPremise_ControlTable",
								"type": "DatasetReference",
								"parameters": {
									"TableName": {
										"value": "@pipeline().parameters.Control_Table_Name",
										"type": "Expression"
									}
								}
							},
							"firstRowOnly": false
						}
					},
					{
						"name": "ForEachPartition",
						"description": "ForEach activity to get the partition list from Lookup activity and then iterate each of them to Copy activity. ",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "GetPartitionList",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('GetPartitionList').output.value",
								"type": "Expression"
							},
							"batchCount": 5,
							"activities": [
								{
									"name": "copy_Sqlserver_to_ADLS",
									"description": "Copy activity to copy each partition from source database store to destination store.",
									"type": "Copy",
									"dependsOn": [],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "SqlServerSource",
											"queryTimeout": "02:00:00",
											"partitionOption": "None"
										},
										"sink": {
											"type": "DelimitedTextSink",
											"storeSettings": {
												"type": "AzureBlobFSWriteSettings"
											},
											"formatSettings": {
												"type": "DelimitedTextWriteSettings",
												"quoteAllText": true,
												"fileExtension": ".csv"
											}
										},
										"enableStaging": false,
										"dataIntegrationUnits": 0
									},
									"inputs": [
										{
											"referenceName": "SqlServer_onPremise",
											"type": "DatasetReference",
											"parameters": {
												"sinkTableName": {
													"value": "@item().SourceTableName",
													"type": "Expression"
												},
												"sinkTableSchema": {
													"value": "@item().SourceTableSchema",
													"type": "Expression"
												}
											}
										}
									],
									"outputs": [
										{
											"referenceName": "AzureDLStorage",
											"type": "DatasetReference",
											"parameters": {
												"Data_Destination_Container": {
													"value": "@item().SourceTableSchema",
													"type": "Expression"
												},
												"Data_Destination_Directory": {
													"value": "@item().SourceTableName",
													"type": "Expression"
												}
											}
										}
									]
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"parameters": {
					"Control_Table_Name": {
						"type": "String",
						"defaultValue": "ControlTableForTemplate"
					},
					"Control_Table_Schema_PartitionID": {
						"type": "String",
						"defaultValue": "PartitionID"
					},
					"Control_Table_Schema_SourceTableName": {
						"type": "String",
						"defaultValue": "SourceTableName"
					},
					"Control_Table_Schema_FilterQuery": {
						"type": "String",
						"defaultValue": "FilterQuery"
					},
					"Data_Destination_Container": {
						"type": "String",
						"defaultValue": "prova"
					},
					"Data_Destination_Directory": {
						"type": "String",
						"defaultValue": "radice"
					},
					"Control_Table_Schema_SourceTableSchema": {
						"type": "string",
						"defaultValue": "SourceTableSchema"
					}
				},
				"folder": {
					"name": "BulkCopies"
				},
				"annotations": [],
				"lastPublishTime": "2021-12-12T15:23:35Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/SqlServer_onPremise_ControlTable')]",
				"[concat(variables('factoryId'), '/datasets/SqlServer_onPremise')]",
				"[concat(variables('factoryId'), '/datasets/AzureDLStorage')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/BulkCopyfrom_SQLServer_to_AzureSQLdb')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "Copy huge amount of data in bulk from database using external control table to store source table list with partitions for each table.\n\nWhen you want to migrate data from your Azure Synapse Analytics like Oracle server, Netezza server, Teradata server or SQL Server to Azure, you have to load huge amount of data from multiple tables in data sources. In most cases, data has to be further partitioned in each table so that you can load rows with multiple threads in parallel from single table.",
				"activities": [
					{
						"name": "GetPartitionList",
						"description": "Lookup activity to retrieve the list of partitions stored in the external control table.",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "SqlServerSource",
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "SqlServer_onPremise_ControlTable",
								"type": "DatasetReference",
								"parameters": {
									"TableName": {
										"value": "@pipeline().parameters.Control_Table_Name",
										"type": "Expression"
									}
								}
							},
							"firstRowOnly": false
						}
					},
					{
						"name": "ForEachPartition",
						"description": "ForEach activity to get the partition list from Lookup activity and then iterate each of them to Copy activity. ",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "GetPartitionList",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('GetPartitionList').output.value",
								"type": "Expression"
							},
							"batchCount": 5,
							"activities": [
								{
									"name": "CopyOnePartition_to_Sqlserver",
									"description": "Copy activity to copy each partition from source database store to destination store.",
									"type": "Copy",
									"dependsOn": [],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "SqlServerSource",
											"queryTimeout": "02:00:00",
											"partitionOption": "None"
										},
										"sink": {
											"type": "AzureSqlSink",
											"preCopyScript": {
												"value": "TRUNCATE TABLE @{item().SourceTableSchema}.@{item().SourceTableName}",
												"type": "Expression"
											},
											"tableOption": "autoCreate",
											"disableMetricsCollection": false
										},
										"enableStaging": false,
										"dataIntegrationUnits": 0
									},
									"inputs": [
										{
											"referenceName": "SqlServer_onPremise",
											"type": "DatasetReference",
											"parameters": {
												"sinkTableName": {
													"value": "@item().SourceTableName",
													"type": "Expression"
												},
												"sinkTableSchema": {
													"value": "@item().SourceTableSchema",
													"type": "Expression"
												}
											}
										}
									],
									"outputs": [
										{
											"referenceName": "AzureSqlDatabaseTable",
											"type": "DatasetReference",
											"parameters": {
												"sourceTableName": {
													"value": "@item().SourceTableName",
													"type": "Expression"
												},
												"sourceTableSchema": {
													"value": "@item().SourceTableSchema",
													"type": "Expression"
												}
											}
										}
									]
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"parameters": {
					"Control_Table_Name": {
						"type": "String",
						"defaultValue": "ControlTableForTemplate"
					},
					"Control_Table_Schema_PartitionID": {
						"type": "String",
						"defaultValue": "PartitionID"
					},
					"Control_Table_Schema_SourceTableName": {
						"type": "String",
						"defaultValue": "SourceTableName"
					},
					"Control_Table_Schema_FilterQuery": {
						"type": "String",
						"defaultValue": "FilterQuery"
					},
					"Data_Destination_Container": {
						"type": "String",
						"defaultValue": "prova"
					},
					"Data_Destination_Directory": {
						"type": "String",
						"defaultValue": "radice"
					},
					"Control_Table_Schema_SourceTableSchema": {
						"type": "string",
						"defaultValue": "SourceTableSchema"
					}
				},
				"folder": {
					"name": "BulkCopies"
				},
				"annotations": [],
				"lastPublishTime": "2021-10-11T14:49:49Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/SqlServer_onPremise_ControlTable')]",
				"[concat(variables('factoryId'), '/datasets/SqlServer_onPremise')]",
				"[concat(variables('factoryId'), '/datasets/AzureSqlDatabaseTable')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/loadData')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Ingest_SQLS_to_ADLS",
						"type": "ExecutePipeline",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "BulkCopyfrom_SQLServer_to_AzureDLStorage",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"Control_Table_Name": "ControlTableForTemplate",
								"Control_Table_Schema_PartitionID": "PartitionID",
								"Control_Table_Schema_SourceTableName": "SourceTableName",
								"Control_Table_Schema_FilterQuery": "FilterQuery",
								"Data_Destination_Container": "prova",
								"Data_Destination_Directory": "radice",
								"Control_Table_Schema_SourceTableSchema": "SourceTableSchema"
							}
						}
					},
					{
						"name": "Process_ADLS_to_Syn",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "Ingest_SQLS_to_ADLS",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "BulkCopyfrom_AzureDLStorage_to_SynapseDedicatedPool",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"SourceContainer": "hpi"
							}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"folder": {
					"name": "healthcare_infoProtection"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/pipelines/BulkCopyfrom_SQLServer_to_AzureDLStorage')]",
				"[concat(variables('factoryId'), '/pipelines/BulkCopyfrom_AzureDLStorage_to_SynapseDedicatedPool')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/AzureDLStorage')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "Connection to your data destination store.",
				"linkedServiceName": {
					"referenceName": "Ls_AdlsGen2_01",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"Data_Destination_Container": {
						"type": "String"
					},
					"Data_Destination_Directory": {
						"type": "String"
					}
				},
				"folder": {
					"name": "BulkCopies"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"folderPath": {
							"value": "@{dataset().Data_Destination_Directory}",
							"type": "Expression"
						},
						"fileSystem": {
							"value": "@{dataset().Data_Destination_Container}",
							"type": "Expression"
						}
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/Ls_AdlsGen2_01')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/AzureDLStorage_GetMetadataDataset')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "Connection to your source data store.",
				"linkedServiceName": {
					"referenceName": "Ls_AdlsGen2_01",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"SourceContainer": {
						"type": "string"
					}
				},
				"folder": {
					"name": "BulkCopies"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileSystem": {
							"value": "@dataset().SourceContainer",
							"type": "Expression"
						}
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"quoteChar": "\""
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/Ls_AdlsGen2_01')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/AzureDLStorage_input_csv')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "Connection to your source data store.",
				"linkedServiceName": {
					"referenceName": "Ls_AdlsGen2_01",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"SourceContainer": {
						"type": "string"
					}
				},
				"folder": {
					"name": "BulkCopies"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileSystem": {
							"value": "@dataset().SourceContainer",
							"type": "Expression"
						}
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/Ls_AdlsGen2_01')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/AzureDLStorage_input_parquet')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "Ls_AdlsGen2_01",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"SourceContainer": {
						"type": "string"
					}
				},
				"folder": {
					"name": "BulkCopies"
				},
				"annotations": [],
				"type": "Parquet",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileSystem": {
							"value": "@dataset().SourceContainer",
							"type": "Expression"
						}
					},
					"compressionCodec": "snappy"
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/Ls_AdlsGen2_01')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/AzureSqlDatabaseExternal_ControlTable')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "The external control table is used to store the partition list of data source tables.",
				"linkedServiceName": {
					"referenceName": "Ls_SqlDb_01",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"TableName": {
						"type": "String"
					}
				},
				"folder": {
					"name": "BulkCopies"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [],
				"typeProperties": {
					"schema": "dbo",
					"table": {
						"value": "@dataset().TableName",
						"type": "Expression"
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/Ls_SqlDb_01')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/AzureSqlDatabaseTable')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "Connection to your data source store.",
				"linkedServiceName": {
					"referenceName": "Ls_SqlDb_01",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"sourceTableName": {
						"type": "string"
					},
					"sourceTableSchema": {
						"type": "string"
					}
				},
				"folder": {
					"name": "BulkCopies"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [],
				"typeProperties": {
					"schema": {
						"value": "@dataset().sourceTableSchema",
						"type": "Expression"
					},
					"table": {
						"value": "@dataset().sourceTableName",
						"type": "Expression"
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/Ls_SqlDb_01')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/AzureSynapseAnalyticsTable')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "Ls_AzureSQLDW_01",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"sinkTableName": {
						"type": "string"
					},
					"sinkTableSchema": {
						"type": "string"
					}
				},
				"folder": {
					"name": "BulkCopies"
				},
				"annotations": [],
				"type": "AzureSqlDWTable",
				"schema": [],
				"typeProperties": {
					"schema": {
						"value": "@dataset().sinkTableSchema",
						"type": "Expression"
					},
					"table": {
						"value": "@dataset().sinkTableName",
						"type": "Expression"
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/Ls_AzureSQLDW_01')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/SqlServer_onPremise')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "Ls_Onprem_SQLServer",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"sinkTableName": {
						"type": "string"
					},
					"sinkTableSchema": {
						"type": "string"
					}
				},
				"folder": {
					"name": "BulkCopies"
				},
				"annotations": [],
				"type": "SqlServerTable",
				"schema": [],
				"typeProperties": {
					"schema": {
						"value": "@dataset().sinkTableSchema",
						"type": "Expression"
					},
					"table": {
						"value": "@dataset().sinkTableName",
						"type": "Expression"
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/Ls_Onprem_SQLServer')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/SqlServer_onPremise_ControlTable')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "Ls_Onprem_SQLServer",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"TableName": {
						"type": "string"
					}
				},
				"folder": {
					"name": "BulkCopies"
				},
				"annotations": [],
				"type": "SqlServerTable",
				"schema": [],
				"typeProperties": {
					"schema": "hpi",
					"table": {
						"value": "@dataset().TableName",
						"type": "Expression"
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/Ls_Onprem_SQLServer')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Ls_AdlsGen2_01')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureBlobFS",
				"typeProperties": {
					"url": "[parameters('Ls_AdlsGen2_01_properties_typeProperties_url')]"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/Ls_AzureDatabricks_01')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureDatabricks",
				"typeProperties": {
					"domain": "https://adb-1354948144884338.18.azuredatabricks.net",
					"authentication": "MSI",
					"workspaceResourceId": "/subscriptions/272f5f06-6693-48ae-975b-b5c7553539c2/resourceGroups/ag83-00006-dev-rg/providers/Microsoft.Databricks/workspaces/ag83-dbw-dev-00006",
					"newClusterNodeType": "Standard_DS3_v2",
					"newClusterNumOfWorker": "1",
					"newClusterSparkEnvVars": {
						"PYSPARK_PYTHON": "/databricks/python3/bin/python3"
					},
					"newClusterVersion": "7.3.x-scala2.12",
					"newClusterInitScripts": []
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/Ls_AzureSQLDW_01')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureSqlDW",
				"typeProperties": {
					"connectionString": "[parameters('Ls_AzureSQLDW_01_connectionString')]"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/Ls_KeyVault_01')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureKeyVault",
				"typeProperties": {
					"baseUrl": "[parameters('Ls_KeyVault_01_properties_typeProperties_baseUrl')]"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/Ls_Onprem_SQLServer')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "SqlServer",
				"typeProperties": {
					"connectionString": "[parameters('Ls_Onprem_SQLServer_connectionString')]"
				},
				"connectVia": {
					"referenceName": "Lsshir01",
					"type": "IntegrationRuntimeReference"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/integrationRuntimes/Lsshir01')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Ls_SqlDb_01')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureSqlDatabase",
				"typeProperties": {
					"connectionString": {
						"type": "AzureKeyVaultSecret",
						"store": {
							"referenceName": "Ls_KeyVault_01",
							"type": "LinkedServiceReference"
						},
						"secretName": "[parameters('Ls_SqlDb_01_properties_typeProperties_connectionString_secretName')]"
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/Ls_KeyVault_01')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Lsshir01')]",
			"type": "Microsoft.DataFactory/factories/integrationRuntimes",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "SelfHosted",
				"typeProperties": {
					"linkedInfo": {
						"resourceId": "[parameters('Lsshir01_properties_typeProperties_linkedInfo_resourceId')]",
						"authorizationType": "Rbac"
					}
				}
			},
			"dependsOn": []
		}
	]
}